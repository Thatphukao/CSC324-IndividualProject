install.packages("shiny")
library(shiny)
runExample("01_hello")
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
# Using "memoise" to automatically cache the results
getTermMatrix <- memoise(function(book) {
# Careful not to let just any name slip in here; a
# malicious user could manipulate this value.
if (!(book %in% books))
stop("Unknown book")
text <- readLines(sprintf("./%s.txt.gz", book),
encoding="UTF-8")
myCorpus = Corpus(VectorSource(text))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
fluidPage(
# Application title
titlePanel("Word Cloud"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
selectInput("selection", "Choose a book:",
choices = books),
actionButton("update", "Change"),
hr(),
sliderInput("freq",
"Minimum Frequency:",
min = 1,  max = 50, value = 15),
sliderInput("max",
"Maximum Number of Words:",
min = 1,  max = 300,  value = 100)
),
# Show Word Cloud
mainPanel(
plotOutput("plot")
)
)
)
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
View(books)
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
billboard = read.csv("billboard.csv")
billboard = read.csv("~/Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout/billboard.csv")
print(colnames(billboard))
billboard = read.csv("~/Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout/billboard.csv")
print(colnames(billboard))
print(billboard[, 5])
write.table(billboard[, 5], "~/Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout/billboardGenre.txt")
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
write.table(billboard, "~/Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout/billboard.txt")
billboardData <<- list("Top 100 Billboard" = "billboard")
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/tryout')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/histogram')
runApp('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/histogram')
getwd()
setwd('Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/histogram')
billboard <- read.csv(billboard.csv)
getwd()
billboard <- read.csv(./billboard.csv)
billboard <- read.csv("billboard.csv")
(billboard)
runApp()
runApp()
setwd("Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs/wordcloud")
billboard = read.csv("billboardlyrics.csv")
getwd()
setwd("Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs")
setwd("~/Documents/Documents - That’s Laptop/Grinnell Stuff/2023 Fall/c CSC-324/Labs")
billboard = read.csv("wordcloud/billboardlyrics.csv")
print(colnames(billboard))
print(billboard[, 31])
write.table(billboard, "wordcloud/billboardlyrics.txt")
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
billboard = read.csv("wordcloud/billboardlyrics.csv")
print(colnames(billboard))
print(billboard[, 31])
print(colnames(billboard))
unique(billboard$genre)
sort(unique(billboard$genre))
print(colnames(billboard))
print(head(billboard[, 31]))
print(head(billboard$lyrics))
print(head(billboard$lyrics))
print(head(billboard$broad_genre))
print(head(billboard$genre))
install.packages("dplyr")
install.packages("stringr")
# Load necessary libraries
library(dplyr)
library(stringr)
# Define a vector with the genres of interest
genres_of_interest <- c('r&b', 'country', 'rap')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
library(purrr)
# Define a vector with the genres of interest
genres_of_interest <- c('r&b', 'country', 'rap')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "lyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('r&b', 'country', 'rap')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "lyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
View(filtered_df)
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "lyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/lyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/rapLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('rap')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/rapLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('r&b')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/rapLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/r&bLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Load necessary libraries
library(dplyr)
library(stringr)
library(purrr)
# Define a vector with the genres of interest
genres_of_interest <- c('rap')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/r&bLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('r&b')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/r&bLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('rap')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/rapLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('country')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/countryLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/countryLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/countryLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/r&bLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/rapLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('rap')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# After filtering your dataframe
filtered_df$lyrics <- str_replace_all(filtered_df$lyrics, "[^[:graph:]]", " ")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/rapLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('r&b')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# After filtering your dataframe
filtered_df$lyrics <- str_replace_all(filtered_df$lyrics, "[^[:graph:]]", " ")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/r&bLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('country')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# After filtering your dataframe
filtered_df$lyrics <- str_replace_all(filtered_df$lyrics, "[^[:graph:]]", " ")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/countryLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('pop')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# After filtering your dataframe
filtered_df$lyrics <- str_replace_all(filtered_df$lyrics, "[^[:graph:]]", " ")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/popLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
# Define a vector with the genres of interest
genres_of_interest <- c('rock')
# Define a function to check if any of the genres_of_interest are in the genre column for each row
is_genre_of_interest <- function(genre_str, genres_of_interest) {
# Extract the genres from the genre_str
genres <- str_extract_all(genre_str, "[a-z&]+")[[1]]
# Check if any of the extracted genres are in the genres_of_interest vector
any(genres %in% genres_of_interest)
}
# Filter the dataframe to only include rows with the genres of interest
filtered_df <- billboard %>% filter(map_lgl(genre, is_genre_of_interest, genres_of_interest = genres_of_interest))
# After filtering your dataframe
filtered_df$lyrics <- str_replace_all(filtered_df$lyrics, "[^[:graph:]]", " ")
# Write the lyrics to a txt file
write.table(filtered_df$lyrics, "wordcloud/rockLyrics.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('histogram')
runApp('wordcloud')
getwd()
getwd()
getwd()
tinytex::install_tinytex()
install.packages("shinythemes")
runApp('wordcloud')
runApp('wordcloud')
View(is_genre_of_interest)
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
